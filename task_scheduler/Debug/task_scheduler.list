
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080015fc  080015fc  000025fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001628  08001628  00003010  2**0
                  CONTENTS
  4 .ARM          00000000  08001628  08001628  00003010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001628  08001628  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001628  08001628  00002628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800162c  0800162c  0000262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001630  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001084  20000010  08001640  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  08001640  00003094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d35  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015df  00000000  00000000  0000ad6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0000c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fc  00000000  00000000  0000cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016596  00000000  00000000  0000d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e1  00000000  00000000  000238f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f35  00000000  00000000  0002cfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000250c  00000000  00000000  000b0f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b3458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080015e4 	.word	0x080015e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080015e4 	.word	0x080015e4

0800014c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	db0a      	blt.n	8000176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	@ (8000198 <__NVIC_SetPriority+0x4c>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	0112      	lsls	r2, r2, #4
 800016c:	b2d2      	uxtb	r2, r2
 800016e:	440b      	add	r3, r1
 8000170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000174:	e00a      	b.n	800018c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4908      	ldr	r1, [pc, #32]	@ (800019c <__NVIC_SetPriority+0x50>)
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	f003 030f 	and.w	r3, r3, #15
 8000182:	3b04      	subs	r3, #4
 8000184:	0112      	lsls	r2, r2, #4
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	440b      	add	r3, r1
 800018a:	761a      	strb	r2, [r3, #24]
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000e100 	.word	0xe000e100
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3b01      	subs	r3, #1
 80001ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80001b0:	d301      	bcc.n	80001b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00f      	b.n	80001d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001b6:	4a0a      	ldr	r2, [pc, #40]	@ (80001e0 <SysTick_Config+0x40>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001be:	210f      	movs	r1, #15
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f7ff ffc2 	bl	800014c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001c8:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <SysTick_Config+0x40>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001ce:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <SysTick_Config+0x40>)
 80001d0:	2207      	movs	r2, #7
 80001d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80001d4:	2300      	movs	r3, #0
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fa2f 	bl	800064c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f863 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f89d 	bl	8000330 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  SCB->CCR |= SCB_CCR_STKALIGN_Msk; // Enable double word stack alignment
 80001f6:	4b28      	ldr	r3, [pc, #160]	@ (8000298 <main+0xb4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a27      	ldr	r2, [pc, #156]	@ (8000298 <main+0xb4>)
 80001fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000200:	6153      	str	r3, [r2, #20]

  	// Starting the task scheduler
  	// Create stack frame for task0
  	PSP_array[0] = ((unsigned int) task0_stack)+ (sizeof task0_stack) - 16*4;
 8000202:	4b26      	ldr	r3, [pc, #152]	@ (800029c <main+0xb8>)
 8000204:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8000208:	4a25      	ldr	r2, [pc, #148]	@ (80002a0 <main+0xbc>)
 800020a:	6013      	str	r3, [r2, #0]
  	HW32_REG((PSP_array[0] + (14<<2))) = (uint32_t) task0;// initial Program Counter
 800020c:	4b24      	ldr	r3, [pc, #144]	@ (80002a0 <main+0xbc>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3338      	adds	r3, #56	@ 0x38
 8000212:	461a      	mov	r2, r3
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <main+0xc0>)
 8000216:	6013      	str	r3, [r2, #0]
  	HW32_REG((PSP_array[0] + (15<<2))) = 0x01000000; // initial xPSR
 8000218:	4b21      	ldr	r3, [pc, #132]	@ (80002a0 <main+0xbc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	333c      	adds	r3, #60	@ 0x3c
 800021e:	461a      	mov	r2, r3
 8000220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000224:	6013      	str	r3, [r2, #0]

  	// Create stack frame for task1
  	PSP_array[1] = ((unsigned int) task1_stack)+ (sizeof task1_stack) - 16*4;
 8000226:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <main+0xc4>)
 8000228:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800022c:	4a1c      	ldr	r2, [pc, #112]	@ (80002a0 <main+0xbc>)
 800022e:	6053      	str	r3, [r2, #4]
  	HW32_REG((PSP_array[1] + (14<<2))) = (uint32_t) task1;// initial Program Counter
 8000230:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <main+0xbc>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	3338      	adds	r3, #56	@ 0x38
 8000236:	461a      	mov	r2, r3
 8000238:	4b1c      	ldr	r3, [pc, #112]	@ (80002ac <main+0xc8>)
 800023a:	6013      	str	r3, [r2, #0]
  	HW32_REG((PSP_array[1] + (15<<2))) = 0x01000000; // initial xPSR
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <main+0xbc>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	333c      	adds	r3, #60	@ 0x3c
 8000242:	461a      	mov	r2, r3
 8000244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000248:	6013      	str	r3, [r2, #0]

  	curr_task = 0; 							  // Switch to task #0 (Current task)
 800024a:	4b19      	ldr	r3, [pc, #100]	@ (80002b0 <main+0xcc>)
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
  	__set_PSP((PSP_array[curr_task] + 16*4)); // Set PSP to top of task 0 stack
 8000250:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <main+0xcc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a12      	ldr	r2, [pc, #72]	@ (80002a0 <main+0xbc>)
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	3340      	adds	r3, #64	@ 0x40
 800025c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	f383 8809 	msr	PSP, r3
}
 8000264:	bf00      	nop
  	NVIC_SetPriority(PendSV_IRQn, 0xFF);      // Set PendSV to lowest possible priority
 8000266:	21ff      	movs	r1, #255	@ 0xff
 8000268:	f06f 0001 	mvn.w	r0, #1
 800026c:	f7ff ff6e 	bl	800014c <__NVIC_SetPriority>
  	SysTick_Config(800000);
 8000270:	4810      	ldr	r0, [pc, #64]	@ (80002b4 <main+0xd0>)
 8000272:	f7ff ff95 	bl	80001a0 <SysTick_Config>
 8000276:	2303      	movs	r3, #3
 8000278:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f383 8814 	msr	CONTROL, r3
}
 8000280:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000282:	f3bf 8f6f 	isb	sy
}
 8000286:	bf00      	nop

  	__set_CONTROL(0x3); // Switch to use Process Stack, unprivileged state
  	__ISB(); // Execute ISB after changing CONTROL (architectural recommendation)

  task0();
 8000288:	f000 f868 	bl	800035c <task0>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 800028c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000290:	f000 fa0e 	bl	80006b0 <HAL_Delay>
 8000294:	e7fa      	b.n	800028c <main+0xa8>
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00
 800029c:	20000030 	.word	0x20000030
 80002a0:	20001034 	.word	0x20001034
 80002a4:	0800035d 	.word	0x0800035d
 80002a8:	20000830 	.word	0x20000830
 80002ac:	08000371 	.word	0x08000371
 80002b0:	20001030 	.word	0x20001030
 80002b4:	000c3500 	.word	0x000c3500

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f960 	bl	800158c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fae2 	bl	80008b8 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fa:	f000 f855 	bl	80003a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fd50 	bl	8000dbc <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f841 	bl	80003a8 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	@ 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_GPIO_Init+0x28>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a07      	ldr	r2, [pc, #28]	@ (8000358 <MX_GPIO_Init+0x28>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <MX_GPIO_Init+0x28>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0304 	and.w	r3, r3, #4
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000

0800035c <task0>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------
void task0(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	while (1)
	{
		task0_var++;
 8000360:	4b02      	ldr	r3, [pc, #8]	@ (800036c <task0+0x10>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a01      	ldr	r2, [pc, #4]	@ (800036c <task0+0x10>)
 8000368:	6013      	str	r3, [r2, #0]
 800036a:	e7f9      	b.n	8000360 <task0+0x4>
 800036c:	2000103c 	.word	0x2000103c

08000370 <task1>:
	}
}
// ------------------------------------------------------------
void task1(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	while (1)
	{
		task1_var++;
 8000374:	4b02      	ldr	r3, [pc, #8]	@ (8000380 <task1+0x10>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	4a01      	ldr	r2, [pc, #4]	@ (8000380 <task1+0x10>)
 800037c:	6013      	str	r3, [r2, #0]
 800037e:	e7f9      	b.n	8000374 <task1+0x4>
 8000380:	20001040 	.word	0x20001040

08000384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a04      	ldr	r2, [pc, #16]	@ (80003a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d101      	bne.n	800039a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000396:	f000 f96f 	bl	8000678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40012c00 	.word	0x40012c00

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <Error_Handler+0x8>

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08c      	sub	sp, #48	@ 0x30
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000420:	2300      	movs	r3, #0
 8000422:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000428:	2300      	movs	r3, #0
 800042a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800042e:	4b2e      	ldr	r3, [pc, #184]	@ (80004e8 <HAL_InitTick+0xd0>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a2d      	ldr	r2, [pc, #180]	@ (80004e8 <HAL_InitTick+0xd0>)
 8000434:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b2b      	ldr	r3, [pc, #172]	@ (80004e8 <HAL_InitTick+0xd0>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000446:	f107 020c 	add.w	r2, r7, #12
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fe0f 	bl	8001074 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000456:	f000 fdf9 	bl	800104c <HAL_RCC_GetPCLK2Freq>
 800045a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800045c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800045e:	4a23      	ldr	r2, [pc, #140]	@ (80004ec <HAL_InitTick+0xd4>)
 8000460:	fba2 2303 	umull	r2, r3, r2, r3
 8000464:	0c9b      	lsrs	r3, r3, #18
 8000466:	3b01      	subs	r3, #1
 8000468:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800046a:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <HAL_InitTick+0xd8>)
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <HAL_InitTick+0xdc>)
 800046e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000470:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <HAL_InitTick+0xd8>)
 8000472:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000476:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000478:	4a1d      	ldr	r2, [pc, #116]	@ (80004f0 <HAL_InitTick+0xd8>)
 800047a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800047c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <HAL_InitTick+0xd8>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <HAL_InitTick+0xd8>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048a:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <HAL_InitTick+0xd8>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000490:	4817      	ldr	r0, [pc, #92]	@ (80004f0 <HAL_InitTick+0xd8>)
 8000492:	f000 fe3d 	bl	8001110 <HAL_TIM_Base_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800049c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d11b      	bne.n	80004dc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80004a4:	4812      	ldr	r0, [pc, #72]	@ (80004f0 <HAL_InitTick+0xd8>)
 80004a6:	f000 fe8b 	bl	80011c0 <HAL_TIM_Base_Start_IT>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80004b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d111      	bne.n	80004dc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004b8:	2019      	movs	r0, #25
 80004ba:	f000 f9ee 	bl	800089a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	d808      	bhi.n	80004d6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80004c4:	2200      	movs	r2, #0
 80004c6:	6879      	ldr	r1, [r7, #4]
 80004c8:	2019      	movs	r0, #25
 80004ca:	f000 f9ca 	bl	8000862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ce:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <HAL_InitTick+0xe0>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	e002      	b.n	80004dc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80004dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3730      	adds	r7, #48	@ 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	431bde83 	.word	0x431bde83
 80004f0:	20001044 	.word	0x20001044
 80004f4:	40012c00 	.word	0x40012c00
 80004f8:	20000008 	.word	0x20000008

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <NMI_Handler+0x4>

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <MemManage_Handler+0x4>

08000514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <UsageFault_Handler+0x4>

08000524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
 void PendSV_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
cnt++;
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <PendSV_Handler+0x3c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <PendSV_Handler+0x3c>)
 8000548:	6013      	str	r3, [r2, #0]
	 __asm__ volatile ("MRS R0, PSP");
 800054a:	f3ef 8009 	mrs	r0, PSP
	 __asm__ volatile ("STMDB R0!,{R4-R11}");
 800054e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	 __asm__ volatile ("LDR R1, =curr_task");
 8000552:	490a      	ldr	r1, [pc, #40]	@ (800057c <PendSV_Handler+0x40>)
	 __asm__ volatile ("LDR R2,[R1]");
 8000554:	680a      	ldr	r2, [r1, #0]
	 __asm__ volatile ("LDR R3,=PSP_array");
 8000556:	4b0a      	ldr	r3, [pc, #40]	@ (8000580 <PendSV_Handler+0x44>)
	 __asm__ volatile ("STR R0,[R3, R2, LSL #2]");
 8000558:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

	__asm__ volatile ("LDR R4,=next_task");
 800055c:	4c09      	ldr	r4, [pc, #36]	@ (8000584 <PendSV_Handler+0x48>)
	__asm__ volatile ("LDR R4,[R4]");
 800055e:	6824      	ldr	r4, [r4, #0]
	__asm__ volatile ("STR R4,[R1]");
 8000560:	600c      	str	r4, [r1, #0]
	__asm__ volatile ("LDR R0,[R3, R4, LSL #2]");
 8000562:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
	__asm__ volatile ("LDMIA R0!,{R4-R11}");
 8000566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm__ volatile ("MSR PSP, R0");
 800056a:	f380 8809 	msr	PSP, r0

	__asm__ volatile ("BX LR");
 800056e:	4770      	bx	lr
	__asm__ volatile (".align 2");

  /* USER CODE END PendSV_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	2000108c 	.word	0x2000108c
 800057c:	20001030 	.word	0x20001030
 8000580:	20001034 	.word	0x20001034
 8000584:	20000000 	.word	0x20000000

08000588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	// Simple task round robin scheduler
	switch(curr_task) {
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <SysTick_Handler+0x4c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <SysTick_Handler+0x12>
 8000594:	2b01      	cmp	r3, #1
 8000596:	d004      	beq.n	80005a2 <SysTick_Handler+0x1a>
 8000598:	e007      	b.n	80005aa <SysTick_Handler+0x22>
		case(0): next_task=1;
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <SysTick_Handler+0x50>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]
			break;
 80005a0:	e007      	b.n	80005b2 <SysTick_Handler+0x2a>
		case(1): next_task=0;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <SysTick_Handler+0x50>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
			break;
 80005a8:	e003      	b.n	80005b2 <SysTick_Handler+0x2a>
		default: next_task=0;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <SysTick_Handler+0x50>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
			break; // Should not be here
 80005b0:	bf00      	nop

  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

	if (curr_task!=next_task){ // Context switching needed
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <SysTick_Handler+0x4c>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <SysTick_Handler+0x50>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d006      	beq.n	80005cc <SysTick_Handler+0x44>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; // Set PendSV to pending
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <SysTick_Handler+0x54>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <SysTick_Handler+0x54>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	6053      	str	r3, [r2, #4]
	}
	return;
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20001030 	.word	0x20001030
 80005d8:	20000000 	.word	0x20000000
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005e4:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <TIM1_UP_IRQHandler+0x10>)
 80005e6:	f000 fe3d 	bl	8001264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20001044 	.word	0x20001044

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000600:	f7ff fff8 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000606:	490c      	ldr	r1, [pc, #48]	@ (8000638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000608:	4a0c      	ldr	r2, [pc, #48]	@ (800063c <LoopFillZerobss+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800061c:	4c09      	ldr	r4, [pc, #36]	@ (8000644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062a:	f000 ffb7 	bl	800159c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff fdd9 	bl	80001e4 <main>
  bx lr
 8000632:	4770      	bx	lr
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800063c:	08001630 	.word	0x08001630
  ldr r2, =_sbss
 8000640:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000644:	20001094 	.word	0x20001094

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>
	...

0800064c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <HAL_Init+0x28>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <HAL_Init+0x28>)
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f8f5 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	200f      	movs	r0, #15
 8000664:	f7ff fed8 	bl	8000418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000668:	f7ff fea4 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_IncTick+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a03      	ldr	r2, [pc, #12]	@ (8000698 <HAL_IncTick+0x20>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	2000000c 	.word	0x2000000c
 8000698:	20001090 	.word	0x20001090

0800069c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b02      	ldr	r3, [pc, #8]	@ (80006ac <HAL_GetTick+0x10>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20001090 	.word	0x20001090

080006b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b8:	f7ff fff0 	bl	800069c <HAL_GetTick>
 80006bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c8:	d005      	beq.n	80006d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_Delay+0x44>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d6:	bf00      	nop
 80006d8:	f7ff ffe0 	bl	800069c <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d8f7      	bhi.n	80006d8 <HAL_Delay+0x28>
  {
  }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000000c 	.word	0x2000000c

080006f8 <__NVIC_SetPriorityGrouping>:
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4906      	ldr	r1, [pc, #24]	@ (8000790 <__NVIC_EnableIRQ+0x34>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_EncodePriority>:
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	@ 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f1c3 0307 	rsb	r3, r3, #7
 8000802:	2b04      	cmp	r3, #4
 8000804:	bf28      	it	cs
 8000806:	2304      	movcs	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3304      	adds	r3, #4
 800080e:	2b06      	cmp	r3, #6
 8000810:	d902      	bls.n	8000818 <NVIC_EncodePriority+0x30>
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3b03      	subs	r3, #3
 8000816:	e000      	b.n	800081a <NVIC_EncodePriority+0x32>
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43da      	mvns	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	401a      	ands	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43d9      	mvns	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	4313      	orrs	r3, r2
}
 8000842:	4618      	mov	r0, r3
 8000844:	3724      	adds	r7, #36	@ 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff4f 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff64 	bl	8000740 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ffb2 	bl	80007e8 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff81 	bl	8000794 <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff57 	bl	800075c <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e272      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 8087 	beq.w	80009e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008d8:	4b92      	ldr	r3, [pc, #584]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f003 030c 	and.w	r3, r3, #12
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d00c      	beq.n	80008fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008e4:	4b8f      	ldr	r3, [pc, #572]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 030c 	and.w	r3, r3, #12
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	d112      	bne.n	8000916 <HAL_RCC_OscConfig+0x5e>
 80008f0:	4b8c      	ldr	r3, [pc, #560]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80008fc:	d10b      	bne.n	8000916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008fe:	4b89      	ldr	r3, [pc, #548]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d06c      	beq.n	80009e4 <HAL_RCC_OscConfig+0x12c>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d168      	bne.n	80009e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e24c      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800091e:	d106      	bne.n	800092e <HAL_RCC_OscConfig+0x76>
 8000920:	4b80      	ldr	r3, [pc, #512]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a7f      	ldr	r2, [pc, #508]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e02e      	b.n	800098c <HAL_RCC_OscConfig+0xd4>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10c      	bne.n	8000950 <HAL_RCC_OscConfig+0x98>
 8000936:	4b7b      	ldr	r3, [pc, #492]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a7a      	ldr	r2, [pc, #488]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 800093c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	4b78      	ldr	r3, [pc, #480]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a77      	ldr	r2, [pc, #476]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000948:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e01d      	b.n	800098c <HAL_RCC_OscConfig+0xd4>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000958:	d10c      	bne.n	8000974 <HAL_RCC_OscConfig+0xbc>
 800095a:	4b72      	ldr	r3, [pc, #456]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a71      	ldr	r2, [pc, #452]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	4b6f      	ldr	r3, [pc, #444]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a6e      	ldr	r2, [pc, #440]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 800096c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e00b      	b.n	800098c <HAL_RCC_OscConfig+0xd4>
 8000974:	4b6b      	ldr	r3, [pc, #428]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a6a      	ldr	r2, [pc, #424]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 800097a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b68      	ldr	r3, [pc, #416]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a67      	ldr	r2, [pc, #412]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800098a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d013      	beq.n	80009bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000994:	f7ff fe82 	bl	800069c <HAL_GetTick>
 8000998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099a:	e008      	b.n	80009ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800099c:	f7ff fe7e 	bl	800069c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	2b64      	cmp	r3, #100	@ 0x64
 80009a8:	d901      	bls.n	80009ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80009aa:	2303      	movs	r3, #3
 80009ac:	e200      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f0      	beq.n	800099c <HAL_RCC_OscConfig+0xe4>
 80009ba:	e014      	b.n	80009e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009bc:	f7ff fe6e 	bl	800069c <HAL_GetTick>
 80009c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c2:	e008      	b.n	80009d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009c4:	f7ff fe6a 	bl	800069c <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b64      	cmp	r3, #100	@ 0x64
 80009d0:	d901      	bls.n	80009d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e1ec      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d6:	4b53      	ldr	r3, [pc, #332]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f0      	bne.n	80009c4 <HAL_RCC_OscConfig+0x10c>
 80009e2:	e000      	b.n	80009e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d063      	beq.n	8000aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009f2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 030c 	and.w	r3, r3, #12
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009fe:	4b49      	ldr	r3, [pc, #292]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 030c 	and.w	r3, r3, #12
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d11c      	bne.n	8000a44 <HAL_RCC_OscConfig+0x18c>
 8000a0a:	4b46      	ldr	r3, [pc, #280]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d116      	bne.n	8000a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a16:	4b43      	ldr	r3, [pc, #268]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d005      	beq.n	8000a2e <HAL_RCC_OscConfig+0x176>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d001      	beq.n	8000a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e1c0      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	4939      	ldr	r1, [pc, #228]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a42:	e03a      	b.n	8000aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d020      	beq.n	8000a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a4c:	4b36      	ldr	r3, [pc, #216]	@ (8000b28 <HAL_RCC_OscConfig+0x270>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a52:	f7ff fe23 	bl	800069c <HAL_GetTick>
 8000a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a58:	e008      	b.n	8000a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a5a:	f7ff fe1f 	bl	800069c <HAL_GetTick>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d901      	bls.n	8000a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e1a1      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f0      	beq.n	8000a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a78:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	4927      	ldr	r1, [pc, #156]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	600b      	str	r3, [r1, #0]
 8000a8c:	e015      	b.n	8000aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <HAL_RCC_OscConfig+0x270>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a94:	f7ff fe02 	bl	800069c <HAL_GetTick>
 8000a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9a:	e008      	b.n	8000aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fdfe 	bl	800069c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d901      	bls.n	8000aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e180      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aae:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f0      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d03a      	beq.n	8000b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d019      	beq.n	8000b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_RCC_OscConfig+0x274>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fde2 	bl	800069c <HAL_GetTick>
 8000ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ada:	e008      	b.n	8000aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000adc:	f7ff fdde 	bl	800069c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d901      	bls.n	8000aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e160      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_RCC_OscConfig+0x26c>)
 8000af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f0      	beq.n	8000adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 faea 	bl	80010d4 <RCC_Delay>
 8000b00:	e01c      	b.n	8000b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_RCC_OscConfig+0x274>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b08:	f7ff fdc8 	bl	800069c <HAL_GetTick>
 8000b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b0e:	e00f      	b.n	8000b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b10:	f7ff fdc4 	bl	800069c <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d908      	bls.n	8000b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	e146      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	42420000 	.word	0x42420000
 8000b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b30:	4b92      	ldr	r3, [pc, #584]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1e9      	bne.n	8000b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80a6 	beq.w	8000c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10d      	bne.n	8000b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b88      	ldr	r3, [pc, #544]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a87      	ldr	r2, [pc, #540]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	61d3      	str	r3, [r2, #28]
 8000b66:	4b85      	ldr	r3, [pc, #532]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b72:	2301      	movs	r3, #1
 8000b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b76:	4b82      	ldr	r3, [pc, #520]	@ (8000d80 <HAL_RCC_OscConfig+0x4c8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d118      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b82:	4b7f      	ldr	r3, [pc, #508]	@ (8000d80 <HAL_RCC_OscConfig+0x4c8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a7e      	ldr	r2, [pc, #504]	@ (8000d80 <HAL_RCC_OscConfig+0x4c8>)
 8000b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fd85 	bl	800069c <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b94:	e008      	b.n	8000ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b96:	f7ff fd81 	bl	800069c <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b64      	cmp	r3, #100	@ 0x64
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e103      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ba8:	4b75      	ldr	r3, [pc, #468]	@ (8000d80 <HAL_RCC_OscConfig+0x4c8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f0      	beq.n	8000b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d106      	bne.n	8000bca <HAL_RCC_OscConfig+0x312>
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	4a6e      	ldr	r2, [pc, #440]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6213      	str	r3, [r2, #32]
 8000bc8:	e02d      	b.n	8000c26 <HAL_RCC_OscConfig+0x36e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x334>
 8000bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	4a69      	ldr	r2, [pc, #420]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	6213      	str	r3, [r2, #32]
 8000bde:	4b67      	ldr	r3, [pc, #412]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000be0:	6a1b      	ldr	r3, [r3, #32]
 8000be2:	4a66      	ldr	r2, [pc, #408]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000be4:	f023 0304 	bic.w	r3, r3, #4
 8000be8:	6213      	str	r3, [r2, #32]
 8000bea:	e01c      	b.n	8000c26 <HAL_RCC_OscConfig+0x36e>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	d10c      	bne.n	8000c0e <HAL_RCC_OscConfig+0x356>
 8000bf4:	4b61      	ldr	r3, [pc, #388]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	4a60      	ldr	r2, [pc, #384]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6213      	str	r3, [r2, #32]
 8000c00:	4b5e      	ldr	r3, [pc, #376]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4a5d      	ldr	r2, [pc, #372]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6213      	str	r3, [r2, #32]
 8000c0c:	e00b      	b.n	8000c26 <HAL_RCC_OscConfig+0x36e>
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c10:	6a1b      	ldr	r3, [r3, #32]
 8000c12:	4a5a      	ldr	r2, [pc, #360]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c14:	f023 0301 	bic.w	r3, r3, #1
 8000c18:	6213      	str	r3, [r2, #32]
 8000c1a:	4b58      	ldr	r3, [pc, #352]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	4a57      	ldr	r2, [pc, #348]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c20:	f023 0304 	bic.w	r3, r3, #4
 8000c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d015      	beq.n	8000c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2e:	f7ff fd35 	bl	800069c <HAL_GetTick>
 8000c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c34:	e00a      	b.n	8000c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c36:	f7ff fd31 	bl	800069c <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e0b1      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0ee      	beq.n	8000c36 <HAL_RCC_OscConfig+0x37e>
 8000c58:	e014      	b.n	8000c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5a:	f7ff fd1f 	bl	800069c <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c60:	e00a      	b.n	8000c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c62:	f7ff fd1b 	bl	800069c <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d901      	bls.n	8000c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e09b      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c78:	4b40      	ldr	r3, [pc, #256]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c7a:	6a1b      	ldr	r3, [r3, #32]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1ee      	bne.n	8000c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d105      	bne.n	8000c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 8087 	beq.w	8000dae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d061      	beq.n	8000d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d146      	bne.n	8000d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cb4:	4b33      	ldr	r3, [pc, #204]	@ (8000d84 <HAL_RCC_OscConfig+0x4cc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cba:	f7ff fcef 	bl	800069c <HAL_GetTick>
 8000cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cc0:	e008      	b.n	8000cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cc2:	f7ff fceb 	bl	800069c <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e06d      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd4:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f0      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce8:	d108      	bne.n	8000cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cea:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4921      	ldr	r1, [pc, #132]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a19      	ldr	r1, [r3, #32]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	491b      	ldr	r1, [pc, #108]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_RCC_OscConfig+0x4cc>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fcbf 	bl	800069c <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d22:	f7ff fcbb 	bl	800069c <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e03d      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0x46a>
 8000d40:	e035      	b.n	8000dae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <HAL_RCC_OscConfig+0x4cc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fca8 	bl	800069c <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d50:	f7ff fca4 	bl	800069c <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e026      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_RCC_OscConfig+0x4c4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f0      	bne.n	8000d50 <HAL_RCC_OscConfig+0x498>
 8000d6e:	e01e      	b.n	8000dae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d107      	bne.n	8000d88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e019      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40007000 	.word	0x40007000
 8000d84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <HAL_RCC_OscConfig+0x500>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d106      	bne.n	8000daa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d001      	beq.n	8000dae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e0d0      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d910      	bls.n	8000e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dde:	4b67      	ldr	r3, [pc, #412]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 0207 	bic.w	r2, r3, #7
 8000de6:	4965      	ldr	r1, [pc, #404]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dee:	4b63      	ldr	r3, [pc, #396]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e0b8      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d020      	beq.n	8000e4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e18:	4b59      	ldr	r3, [pc, #356]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a58      	ldr	r2, [pc, #352]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000e22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e30:	4b53      	ldr	r3, [pc, #332]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4a52      	ldr	r2, [pc, #328]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000e3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e3c:	4b50      	ldr	r3, [pc, #320]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	494d      	ldr	r1, [pc, #308]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d040      	beq.n	8000edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d107      	bne.n	8000e72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	4b47      	ldr	r3, [pc, #284]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d115      	bne.n	8000e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e07f      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d107      	bne.n	8000e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e7a:	4b41      	ldr	r3, [pc, #260]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d109      	bne.n	8000e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e073      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e06b      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e9a:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f023 0203 	bic.w	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4936      	ldr	r1, [pc, #216]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000eac:	f7ff fbf6 	bl	800069c <HAL_GetTick>
 8000eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eb2:	e00a      	b.n	8000eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb4:	f7ff fbf2 	bl	800069c <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e053      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eca:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 020c 	and.w	r2, r3, #12
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d1eb      	bne.n	8000eb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000edc:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d210      	bcs.n	8000f0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eea:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 0207 	bic.w	r2, r3, #7
 8000ef2:	4922      	ldr	r1, [pc, #136]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <HAL_RCC_ClockConfig+0x1c0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d001      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e032      	b.n	8000f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	4916      	ldr	r1, [pc, #88]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	490e      	ldr	r1, [pc, #56]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f4a:	f000 f821 	bl	8000f90 <HAL_RCC_GetSysClockFreq>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_RCC_ClockConfig+0x1c4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	490a      	ldr	r1, [pc, #40]	@ (8000f84 <HAL_RCC_ClockConfig+0x1c8>)
 8000f5c:	5ccb      	ldrb	r3, [r1, r3]
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	4a09      	ldr	r2, [pc, #36]	@ (8000f88 <HAL_RCC_ClockConfig+0x1cc>)
 8000f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_RCC_ClockConfig+0x1d0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fa54 	bl	8000418 <HAL_InitTick>

  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	080015fc 	.word	0x080015fc
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d002      	beq.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x30>
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d003      	beq.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x36>
 8000fbe:	e027      	b.n	8001010 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x98>)
 8000fc2:	613b      	str	r3, [r7, #16]
      break;
 8000fc4:	e027      	b.n	8001016 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fd0:	5cd3      	ldrb	r3, [r2, r3]
 8000fd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d010      	beq.n	8001000 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_RCC_GetSysClockFreq+0x94>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	0c5b      	lsrs	r3, r3, #17
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fea:	5cd3      	ldrb	r3, [r2, r3]
 8000fec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ff2:	fb03 f202 	mul.w	r2, r3, r2
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e004      	b.n	800100a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	613b      	str	r3, [r7, #16]
      break;
 800100e:	e002      	b.n	8001016 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x98>)
 8001012:	613b      	str	r3, [r7, #16]
      break;
 8001014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001016:	693b      	ldr	r3, [r7, #16]
}
 8001018:	4618      	mov	r0, r3
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	007a1200 	.word	0x007a1200
 800102c:	08001614 	.word	0x08001614
 8001030:	08001624 	.word	0x08001624
 8001034:	003d0900 	.word	0x003d0900

08001038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800103c:	4b02      	ldr	r3, [pc, #8]	@ (8001048 <HAL_RCC_GetHCLKFreq+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001050:	f7ff fff2 	bl	8001038 <HAL_RCC_GetHCLKFreq>
 8001054:	4602      	mov	r2, r0
 8001056:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	0adb      	lsrs	r3, r3, #11
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	4903      	ldr	r1, [pc, #12]	@ (8001070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001062:	5ccb      	ldrb	r3, [r1, r3]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	0800160c 	.word	0x0800160c

08001074 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	220f      	movs	r2, #15
 8001082:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <HAL_RCC_GetClockConfig+0x58>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <HAL_RCC_GetClockConfig+0x58>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_RCC_GetClockConfig+0x58>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <HAL_RCC_GetClockConfig+0x58>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	08db      	lsrs	r3, r3, #3
 80010ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_RCC_GetClockConfig+0x5c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0207 	and.w	r2, r3, #7
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40022000 	.word	0x40022000

080010d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <RCC_Delay+0x34>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <RCC_Delay+0x38>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0a5b      	lsrs	r3, r3, #9
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80010f0:	bf00      	nop
  }
  while (Delay --);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	60fa      	str	r2, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f9      	bne.n	80010f0 <RCC_Delay+0x1c>
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000004 	.word	0x20000004
 800110c:	10624dd3 	.word	0x10624dd3

08001110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e041      	b.n	80011a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f839 	bl	80011ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f000 f99c 	bl	800148c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d001      	beq.n	80011d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e03a      	b.n	800124e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_TIM_Base_Start_IT+0x98>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00e      	beq.n	8001218 <HAL_TIM_Base_Start_IT+0x58>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001202:	d009      	beq.n	8001218 <HAL_TIM_Base_Start_IT+0x58>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <HAL_TIM_Base_Start_IT+0x9c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d004      	beq.n	8001218 <HAL_TIM_Base_Start_IT+0x58>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <HAL_TIM_Base_Start_IT+0xa0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d111      	bne.n	800123c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b06      	cmp	r3, #6
 8001228:	d010      	beq.n	800124c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800123a:	e007      	b.n	800124c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40012c00 	.word	0x40012c00
 800125c:	40000400 	.word	0x40000400
 8001260:	40000800 	.word	0x40000800

08001264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d020      	beq.n	80012c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01b      	beq.n	80012c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f06f 0202 	mvn.w	r2, #2
 8001298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f8d1 	bl	8001456 <HAL_TIM_IC_CaptureCallback>
 80012b4:	e005      	b.n	80012c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f8c4 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f8d3 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d020      	beq.n	8001314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0204 	mvn.w	r2, #4
 80012e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2202      	movs	r2, #2
 80012ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8ab 	bl	8001456 <HAL_TIM_IC_CaptureCallback>
 8001300:	e005      	b.n	800130e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f89e 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8ad 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d020      	beq.n	8001360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d01b      	beq.n	8001360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f06f 0208 	mvn.w	r2, #8
 8001330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2204      	movs	r2, #4
 8001336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f885 	bl	8001456 <HAL_TIM_IC_CaptureCallback>
 800134c:	e005      	b.n	800135a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f878 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f887 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d020      	beq.n	80013ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01b      	beq.n	80013ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f06f 0210 	mvn.w	r2, #16
 800137c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2208      	movs	r2, #8
 8001382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f85f 	bl	8001456 <HAL_TIM_IC_CaptureCallback>
 8001398:	e005      	b.n	80013a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f852 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f861 	bl	8001468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f06f 0201 	mvn.w	r2, #1
 80013c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7fe ffda 	bl	8000384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80013ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f8c3 	bl	800157a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00c      	beq.n	8001418 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f831 	bl	800147a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 0220 	mvn.w	r2, #32
 8001434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f896 	bl	8001568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a2f      	ldr	r2, [pc, #188]	@ (800155c <TIM_Base_SetConfig+0xd0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00b      	beq.n	80014bc <TIM_Base_SetConfig+0x30>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014aa:	d007      	beq.n	80014bc <TIM_Base_SetConfig+0x30>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001560 <TIM_Base_SetConfig+0xd4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d003      	beq.n	80014bc <TIM_Base_SetConfig+0x30>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001564 <TIM_Base_SetConfig+0xd8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d108      	bne.n	80014ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a22      	ldr	r2, [pc, #136]	@ (800155c <TIM_Base_SetConfig+0xd0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00b      	beq.n	80014ee <TIM_Base_SetConfig+0x62>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014dc:	d007      	beq.n	80014ee <TIM_Base_SetConfig+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001560 <TIM_Base_SetConfig+0xd4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d003      	beq.n	80014ee <TIM_Base_SetConfig+0x62>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <TIM_Base_SetConfig+0xd8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d108      	bne.n	8001500 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <TIM_Base_SetConfig+0xd0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d103      	bne.n	8001534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f023 0201 	bic.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
  }
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40012c00 	.word	0x40012c00
 8001560:	40000400 	.word	0x40000400
 8001564:	40000800 	.word	0x40000800

08001568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <memset>:
 800158c:	4603      	mov	r3, r0
 800158e:	4402      	add	r2, r0
 8001590:	4293      	cmp	r3, r2
 8001592:	d100      	bne.n	8001596 <memset+0xa>
 8001594:	4770      	bx	lr
 8001596:	f803 1b01 	strb.w	r1, [r3], #1
 800159a:	e7f9      	b.n	8001590 <memset+0x4>

0800159c <__libc_init_array>:
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	2600      	movs	r6, #0
 80015a0:	4d0c      	ldr	r5, [pc, #48]	@ (80015d4 <__libc_init_array+0x38>)
 80015a2:	4c0d      	ldr	r4, [pc, #52]	@ (80015d8 <__libc_init_array+0x3c>)
 80015a4:	1b64      	subs	r4, r4, r5
 80015a6:	10a4      	asrs	r4, r4, #2
 80015a8:	42a6      	cmp	r6, r4
 80015aa:	d109      	bne.n	80015c0 <__libc_init_array+0x24>
 80015ac:	f000 f81a 	bl	80015e4 <_init>
 80015b0:	2600      	movs	r6, #0
 80015b2:	4d0a      	ldr	r5, [pc, #40]	@ (80015dc <__libc_init_array+0x40>)
 80015b4:	4c0a      	ldr	r4, [pc, #40]	@ (80015e0 <__libc_init_array+0x44>)
 80015b6:	1b64      	subs	r4, r4, r5
 80015b8:	10a4      	asrs	r4, r4, #2
 80015ba:	42a6      	cmp	r6, r4
 80015bc:	d105      	bne.n	80015ca <__libc_init_array+0x2e>
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015c4:	4798      	blx	r3
 80015c6:	3601      	adds	r6, #1
 80015c8:	e7ee      	b.n	80015a8 <__libc_init_array+0xc>
 80015ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ce:	4798      	blx	r3
 80015d0:	3601      	adds	r6, #1
 80015d2:	e7f2      	b.n	80015ba <__libc_init_array+0x1e>
 80015d4:	08001628 	.word	0x08001628
 80015d8:	08001628 	.word	0x08001628
 80015dc:	08001628 	.word	0x08001628
 80015e0:	0800162c 	.word	0x0800162c

080015e4 <_init>:
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e6:	bf00      	nop
 80015e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ea:	bc08      	pop	{r3}
 80015ec:	469e      	mov	lr, r3
 80015ee:	4770      	bx	lr

080015f0 <_fini>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	bf00      	nop
 80015f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f6:	bc08      	pop	{r3}
 80015f8:	469e      	mov	lr, r3
 80015fa:	4770      	bx	lr
